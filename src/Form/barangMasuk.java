/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import Koneksi.koneksi;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NANRC
 */
public class barangMasuk extends javax.swing.JPanel {
    private Connection conn = new koneksi().connect();
    private DefaultTableModel tabmode;
    private Map<String, Integer> barangMap = new HashMap<>();
    private String selectedKode = "";
    private String selectedTanggal = "";

    /**
     * Creates new form dataBarang1
     */
    public barangMasuk() {
        initComponents();
        kosong();
        aktif();
        datatable();
        loadKodeBarang();
        aturListenerComboBoxBarang();
        hitungTotal();
        txt_total.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        panel_custom11 = new Form.Panel_custom1();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_nb = new javax.swing.JTextField();
        txt_jumlah = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_harga = new javax.swing.JTextField();
        btn_simpan = new Form.customButton();
        btn_ubah = new Form.customButton();
        btn_hapus = new Form.customButton();
        btn_batal = new Form.customButton();
        btn_cari = new Form.customButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBarang = new javax.swing.JTable();
        t_cari = new javax.swing.JTextField();
        cbx_kdb = new javax.swing.JComboBox<>();
        txt_tanggal = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        txt_total = new javax.swing.JTextField();

        setLayout(new java.awt.CardLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        panel_custom11.setBackground(new java.awt.Color(0, 102, 102));
        panel_custom11.setForeground(new java.awt.Color(204, 204, 255));
        panel_custom11.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        panel_custom11.setText("Data Barang Masuk");

        javax.swing.GroupLayout panel_custom11Layout = new javax.swing.GroupLayout(panel_custom11);
        panel_custom11.setLayout(panel_custom11Layout);
        panel_custom11Layout.setHorizontalGroup(
            panel_custom11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel_custom11Layout.setVerticalGroup(
            panel_custom11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel1.setText("Kode Barang");

        jLabel2.setText("Nama Barang");

        jLabel3.setText("Jumlah");

        txt_jumlah.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_jumlahKeyReleased(evt);
            }
        });

        jLabel4.setText("Harga");

        jLabel5.setText("Tanggal Masuk");

        txt_harga.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_hargaKeyReleased(evt);
            }
        });

        btn_simpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar/Save.png"))); // NOI18N
        btn_simpan.setText("SIMPAN");
        btn_simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simpanActionPerformed(evt);
            }
        });

        btn_ubah.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar/Edit.png"))); // NOI18N
        btn_ubah.setText("UBAH");
        btn_ubah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ubahActionPerformed(evt);
            }
        });

        btn_hapus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar/Trash.png"))); // NOI18N
        btn_hapus.setText("HAPUS");
        btn_hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_hapusActionPerformed(evt);
            }
        });

        btn_batal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar/Cancel1.png"))); // NOI18N
        btn_batal.setText("BATAL");
        btn_batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_batalActionPerformed(evt);
            }
        });

        btn_cari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar/Search.png"))); // NOI18N
        btn_cari.setText("CARI");
        btn_cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cariActionPerformed(evt);
            }
        });

        tblBarang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblBarang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBarangMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBarang);

        t_cari.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_cari.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                t_cariFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_cariFocusLost(evt);
            }
        });
        t_cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_cariActionPerformed(evt);
            }
        });
        t_cari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_cariKeyPressed(evt);
            }
        });

        cbx_kdb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Total Harga");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_custom11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_nb)
                            .addComponent(txt_jumlah, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(cbx_kdb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(155, 155, 155)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_harga, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                            .addComponent(txt_tanggal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_total))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_simpan, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(btn_ubah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btn_cari, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(t_cari, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_batal, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(panel_custom11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(txt_harga, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_simpan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_batal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx_kdb, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(txt_nb, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))
                            .addComponent(txt_tanggal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel3)
                                            .addComponent(txt_jumlah, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(jLabel6)))
                                .addGap(29, 29, 29))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btn_cari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_cari, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_ubah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_hapus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE))
        );

        add(jPanel2, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btn_simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simpanActionPerformed
    try {
        // Validasi input
        if (cbx_kdb.getSelectedItem() == null || txt_nb.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Pilih kode barang dan isi nama barang terlebih dahulu!");
            return;
        }

        String tampil = cbx_kdb.getSelectedItem().toString();
        int kode_barang = barangMap.get(tampil);
        String nama_barang = txt_nb.getText().trim();
        int jumlah = Integer.parseInt(txt_jumlah.getText().trim());
        double harga = Util.parseHarga(txt_harga.getText().trim());
        double total = jumlah * harga;

        if (jumlah <= 0 || harga <= 0) {
            JOptionPane.showMessageDialog(null, "Jumlah dan harga harus lebih dari 0!");
            return;
        }

        if (txt_tanggal.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Tanggal belum dipilih!");
            return;
        }

        String tanggal = new SimpleDateFormat("yyyy-MM-dd").format(txt_tanggal.getDate());

        // ✅ 1. Simpan ke tabel barang_masuk (boleh kode_barang sama)
        String sqlInsert = "INSERT INTO barang_masuk (kode_barang, nama_barang, jumlah, harga, tanggal_masuk, total_harga) " +
                           "VALUES (?, ?, ?, ?, ?, ?)";
        try (PreparedStatement stat = conn.prepareStatement(sqlInsert)) {
            stat.setInt(1, kode_barang);
            stat.setString(2, nama_barang);
            stat.setInt(3, jumlah);
            stat.setDouble(4, harga);
            stat.setString(5, tanggal);
            stat.setDouble(6, total);
            stat.executeUpdate();
        }

        // ✅ 2. Ambil data stok, barang_masuk, dan barang_keluar dari tabel barang
        int stokAwal = 0, barangMasukLama = 0, barangKeluar = 0;
        String sqlSelect = "SELECT stok, barang_masuk, barang_keluar FROM barang WHERE kode_barang = ?";
        try (PreparedStatement psSelect = conn.prepareStatement(sqlSelect)) {
            psSelect.setInt(1, kode_barang);
            ResultSet rs = psSelect.executeQuery();
            if (rs.next()) {
                stokAwal = rs.getInt("stok");
                barangMasukLama = rs.getInt("barang_masuk");
                barangKeluar = rs.getInt("barang_keluar");
            }
        }

        // ✅ 3. Hitung nilai baru
        int barangMasukBaru = barangMasukLama + jumlah;
        int totalStokBaru = stokAwal + barangMasukBaru - barangKeluar;

        // ✅ 4. Update tabel barang
        String sqlUpdateInfo = "UPDATE barang SET " +
                "barang_masuk = ?, " +
                "harga = ?, " +
                "total_stok = ? " +
                "WHERE kode_barang = ?";
        try (PreparedStatement psUpdate = conn.prepareStatement(sqlUpdateInfo)) {
            psUpdate.setInt(1, barangMasukBaru);     // update barang_masuk total
            psUpdate.setDouble(2, harga);            // update harga terakhir
            psUpdate.setInt(3, totalStokBaru);       // hitung total_stok dari rumus
            psUpdate.setInt(4, kode_barang);
            psUpdate.executeUpdate();
        }

        JOptionPane.showMessageDialog(null, "Barang masuk berhasil disimpan dan data barang diperbarui.");
        kosong();        // reset form
        datatable();     // refresh tabel

    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(null, "Format jumlah atau harga tidak valid!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Gagal menyimpan data: " + e.getMessage());
        e.printStackTrace();
    }                                    
    }//GEN-LAST:event_btn_simpanActionPerformed

    private void btn_ubahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ubahActionPerformed
       try {
        // ✅ Validasi input awal
        if (cbx_kdb.getSelectedItem() == null || txt_nb.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Silakan pilih kode barang dan isi data dengan lengkap.");
            return;
        }

        String tampil = cbx_kdb.getSelectedItem().toString();
        int kode_barang = barangMap.get(tampil);
        String nama_barang = txt_nb.getText().trim();

        // ✅ Validasi angka
        int jumlahBaru;
        double hargaBaru;
        try {
            jumlahBaru = Integer.parseInt(txt_jumlah.getText().trim());
            hargaBaru = Util.parseHarga(txt_harga.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Jumlah atau harga tidak valid!");
            return;
        }

        if (jumlahBaru <= 0 || hargaBaru <= 0) {
            JOptionPane.showMessageDialog(null, "Jumlah dan harga harus lebih dari 0!");
            return;
        }

        if (txt_tanggal.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Tanggal belum dipilih!");
            return;
        }

        String tanggalBaru = new SimpleDateFormat("yyyy-MM-dd").format(txt_tanggal.getDate());
        double totalBaru = jumlahBaru * hargaBaru;

        // ✅ Ambil jumlah lama dari tabel barang_masuk
        int jumlahLama = 0;
        String cekSql = "SELECT jumlah FROM barang_masuk WHERE kode_barang = ? AND tanggal_masuk = ?";
        try (PreparedStatement cekStmt = conn.prepareStatement(cekSql)) {
            cekStmt.setInt(1, Integer.parseInt(selectedKode));
            cekStmt.setString(2, selectedTanggal);
            try (ResultSet rs = cekStmt.executeQuery()) {
                if (rs.next()) {
                    jumlahLama = rs.getInt("jumlah");
                } else {
                    JOptionPane.showMessageDialog(null, "Data tidak ditemukan. Pastikan memilih data dari tabel.");
                    return;
                }
            }
        }

        // ✅ 1. Update data di tabel barang_masuk
        String sqlUpdateMasuk = "UPDATE barang_masuk SET jumlah = ?, harga = ?, tanggal_masuk = ?, total_harga = ? " +
                                "WHERE kode_barang = ? AND tanggal_masuk = ?";
        try (PreparedStatement stat = conn.prepareStatement(sqlUpdateMasuk)) {
            stat.setInt(1, jumlahBaru);
            stat.setDouble(2, hargaBaru);
            stat.setString(3, tanggalBaru);
            stat.setDouble(4, totalBaru);
            stat.setInt(5, Integer.parseInt(selectedKode));
            stat.setString(6, selectedTanggal);
            stat.executeUpdate();
        }

        // ✅ 2. Ambil data sebelumnya dari tabel barang
        int stok = 0, barangMasukLama = 0, barangKeluar = 0;
        boolean barangAda = false;

        String sqlSelect = "SELECT stok, barang_masuk, barang_keluar FROM barang WHERE kode_barang = ?";
        try (PreparedStatement psSelect = conn.prepareStatement(sqlSelect)) {
            psSelect.setInt(1, kode_barang);
            ResultSet rs = psSelect.executeQuery();
            if (rs.next()) {
                barangAda = true;
                stok = rs.getInt("stok");
                barangMasukLama = rs.getInt("barang_masuk");
                barangKeluar = rs.getInt("barang_keluar");
            }
        }

        if (!barangAda) {
            JOptionPane.showMessageDialog(null, "Data barang tidak ditemukan!");
            return;
        }

        // ✅ 3. Hitung selisih dan total stok baru
        int selisih = jumlahBaru - jumlahLama;
        int barangMasukBaru = barangMasukLama + selisih;
        int totalStokBaru = stok + barangMasukBaru - barangKeluar;

        // ✅ 4. Update tabel barang
        String sqlUpdateBarang = "UPDATE barang SET barang_masuk = ?, harga = ?, total_stok = ? WHERE kode_barang = ?";
        try (PreparedStatement psUpdate = conn.prepareStatement(sqlUpdateBarang)) {
            psUpdate.setInt(1, barangMasukBaru);
            psUpdate.setDouble(2, hargaBaru);
            psUpdate.setInt(3, totalStokBaru);
            psUpdate.setInt(4, kode_barang);
            psUpdate.executeUpdate();
        }

        JOptionPane.showMessageDialog(null, "Data barang masuk berhasil diubah dan data barang diperbarui.");
        kosong();
        datatable();

    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(null, "Format jumlah atau harga tidak valid!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Gagal mengubah data: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btn_ubahActionPerformed

    private void btn_hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_hapusActionPerformed
    if (selectedKode == null || selectedTanggal == null) {
        JOptionPane.showMessageDialog(null, "Silakan pilih data yang ingin dihapus terlebih dahulu!");
        return;
    }

    int konfirmasi = JOptionPane.showConfirmDialog(null, "Yakin ingin menghapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
    if (konfirmasi != JOptionPane.YES_OPTION) {
        return;
    }

    try {
        int kode_barang = Integer.parseInt(selectedKode);
        int jumlahLama = 0;

        // ✅ 1. Ambil jumlah lama dari barang_masuk
        String sqlJumlah = "SELECT jumlah FROM barang_masuk WHERE kode_barang = ? AND tanggal_masuk = ?";
        try (PreparedStatement psJumlah = conn.prepareStatement(sqlJumlah)) {
            psJumlah.setInt(1, kode_barang);
            psJumlah.setString(2, selectedTanggal);
            try (ResultSet rs = psJumlah.executeQuery()) {
                if (rs.next()) {
                    jumlahLama = rs.getInt("jumlah");
                } else {
                    JOptionPane.showMessageDialog(null, "Data tidak ditemukan di tabel barang_masuk.");
                    return;
                }
            }
        }

        // ✅ 2. Hapus data dari barang_masuk
        String sqlDelete = "DELETE FROM barang_masuk WHERE kode_barang = ? AND tanggal_masuk = ?";
        try (PreparedStatement psDelete = conn.prepareStatement(sqlDelete)) {
            psDelete.setInt(1, kode_barang);
            psDelete.setString(2, selectedTanggal);
            psDelete.executeUpdate();
        }

        // ✅ 3. Ambil data lama dari tabel barang
        int stok = 0, barangMasukLama = 0, barangKeluar = 0;
        boolean barangAda = false;

        String sqlSelect = "SELECT stok, barang_masuk, barang_keluar FROM barang WHERE kode_barang = ?";
        try (PreparedStatement psSelect = conn.prepareStatement(sqlSelect)) {
            psSelect.setInt(1, kode_barang);
            try (ResultSet rs = psSelect.executeQuery()) {
                if (rs.next()) {
                    barangAda = true;
                    stok = rs.getInt("stok");
                    barangMasukLama = rs.getInt("barang_masuk");
                    barangKeluar = rs.getInt("barang_keluar");
                }
            }
        }

        if (!barangAda) {
            JOptionPane.showMessageDialog(null, "Data barang tidak ditemukan!");
            return;
        }

        // ✅ 4. Hitung barang_masuk dan total_stok baru
        int barangMasukBaru = barangMasukLama - jumlahLama;
        if (barangMasukBaru < 0) barangMasukBaru = 0;
        int totalStokBaru = stok + barangMasukBaru - barangKeluar;

        // ✅ 5. Update tabel barang
        String sqlUpdateBarang = "UPDATE barang SET barang_masuk = ?, total_stok = ? WHERE kode_barang = ?";
        try (PreparedStatement psUpdate = conn.prepareStatement(sqlUpdateBarang)) {
            psUpdate.setInt(1, barangMasukBaru);
            psUpdate.setInt(2, totalStokBaru);
            psUpdate.setInt(3, kode_barang);
            psUpdate.executeUpdate();
        }

        JOptionPane.showMessageDialog(null, "Data barang masuk berhasil dihapus dan data barang diperbarui.");
        kosong();
        datatable();

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Kode barang tidak valid: " + e.getMessage());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Gagal menghapus data: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btn_hapusActionPerformed

    private void btn_batalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_batalActionPerformed
       kosong();
       datatable();
    }//GEN-LAST:event_btn_batalActionPerformed

    private void t_cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_cariActionPerformed
        datatable();
    }//GEN-LAST:event_t_cariActionPerformed

    private void tblBarangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBarangMouseClicked
     int baris = tblBarang.getSelectedRow();
    if (baris == -1) return;

    try {
        // ✅ Ambil kode dan tanggal dari tabel
        selectedKode = tblBarang.getValueAt(baris, 0).toString();   // kolom kode_barang
        selectedTanggal = tblBarang.getValueAt(baris, 4).toString(); // kolom tanggal_masuk (yyyy-MM-dd)

        // ✅ Temukan dan pilih item di combo box berdasarkan kode
        for (int i = 0; i < cbx_kdb.getItemCount(); i++) {
            String item = cbx_kdb.getItemAt(i);
            if (item.startsWith(selectedKode + " ")) {
                cbx_kdb.setSelectedIndex(i);
                break;
            }
        }

        // ✅ Set isi field lainnya dari tabel
        txt_nb.setText(tblBarang.getValueAt(baris, 1).toString());     // nama_barang
        txt_jumlah.setText(tblBarang.getValueAt(baris, 2).toString()); // jumlah
        txt_harga.setText(tblBarang.getValueAt(baris, 3).toString());  // harga

        // ✅ Set tanggal
        String tanggalStr = tblBarang.getValueAt(baris, 5).toString(); // tanggal
        java.util.Date tanggal = new SimpleDateFormat("yyyy-MM-dd").parse(tanggalStr);
        txt_tanggal.setDate(tanggal);

        aktif(); // aktifkan tombol ubah dan hapus (jika method ini tersedia)

    } catch (ParseException pe) {
        JOptionPane.showMessageDialog(null, "Gagal parsing tanggal: " + pe.getMessage());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat memilih data: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_tblBarangMouseClicked

    private void t_cariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_cariKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            datatable();
        }
    }//GEN-LAST:event_t_cariKeyPressed

    private void txt_jumlahKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_jumlahKeyReleased
        hitungTotal();
    }//GEN-LAST:event_txt_jumlahKeyReleased

    private void txt_hargaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_hargaKeyReleased
        hitungTotal();
    }//GEN-LAST:event_txt_hargaKeyReleased

    private void btn_cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cariActionPerformed
    String cariitem = t_cari.getText().trim();

    Object[] kolom = {"Kode Barang", "Nama Barang", "Jumlah", "Harga", "Tanggal Masuk", "Total Harga"};
    tabmode = new DefaultTableModel(null, kolom);
    tblBarang.setModel(tabmode);

    DecimalFormat df = new DecimalFormat("#,##0.00");

    String sql = "SELECT * FROM barang_masuk WHERE kode_barang LIKE ? OR nama_barang LIKE ? ORDER BY kode_barang ASC";

    try {
        PreparedStatement stat = conn.prepareStatement(sql);
        stat.setString(1, "%" + cariitem + "%");
        stat.setString(2, "%" + cariitem + "%");

        ResultSet hasil = stat.executeQuery();

        while (hasil.next()) {
            String kode = hasil.getString("kode_barang");
            String nama = hasil.getString("nama_barang");
            int jumlah = hasil.getInt("jumlah");
            double harga = hasil.getDouble("harga");
            String tanggal = hasil.getString("tanggal_masuk");
            double total = hasil.getDouble("total_harga");

            String[] data = {
                kode,
                nama,
                String.valueOf(jumlah),
                df.format(harga),
                tanggal,
                df.format(total)
            };
            tabmode.addRow(data);
        }

        hasil.close();
        stat.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Pencarian gagal: " + e.getMessage());
    }
    }//GEN-LAST:event_btn_cariActionPerformed

    private void t_cariFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_cariFocusGained
        
    }//GEN-LAST:event_t_cariFocusGained

    private void t_cariFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_cariFocusLost
       
    }//GEN-LAST:event_t_cariFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Form.customButton btn_batal;
    private Form.customButton btn_cari;
    private Form.customButton btn_hapus;
    private Form.customButton btn_simpan;
    private Form.customButton btn_ubah;
    private javax.swing.JComboBox<String> cbx_kdb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private Form.Panel_custom1 panel_custom11;
    private javax.swing.JTextField t_cari;
    private javax.swing.JTable tblBarang;
    private javax.swing.JTextField txt_harga;
    private javax.swing.JTextField txt_jumlah;
    private javax.swing.JTextField txt_nb;
    private com.toedter.calendar.JDateChooser txt_tanggal;
    private javax.swing.JTextField txt_total;
    // End of variables declaration//GEN-END:variables

    private void kosong() {
    txt_nb.setText("");
    txt_harga.setText("");
    txt_jumlah.setText("");
    txt_tanggal.setDate(null); // reset tanggal
    txt_total.setEditable(false);
    }

    private void aktif() {
    txt_jumlah.setEnabled(true);
    txt_tanggal.setEnabled(true);
    cbx_kdb.setEnabled(true);
    txt_total.setEditable(false);
    }

    private void datatable() {
    Object[] kolom = {"ID", "Kode Barang", "Nama Barang", "Jumlah", "Harga", "Tanggal Masuk", "Total Harga"};
    tabmode = new DefaultTableModel(null, kolom);
    tblBarang.setModel(tabmode);

    DecimalFormat df = new DecimalFormat("#,##0.00"); // Format harga dan total

    String cariitem = t_cari.getText().trim();

    try {
        String sql = "SELECT * FROM barang_masuk WHERE kode_barang LIKE ? OR nama_barang LIKE ? ORDER BY id ASC";
        PreparedStatement stat = conn.prepareStatement(sql);
        stat.setString(1, "%" + cariitem + "%");
        stat.setString(2, "%" + cariitem + "%");

        ResultSet hasil = stat.executeQuery();
        while (hasil.next()) {
            int id = hasil.getInt("id"); // kolom ID
            int kode = hasil.getInt("kode_barang");
            String nama = hasil.getString("nama_barang");
            int jumlah = hasil.getInt("jumlah");
            double harga = hasil.getDouble("harga");
            String tanggal = hasil.getString("tanggal_masuk");
            double total = hasil.getDouble("total_harga");

            Object[] data = {
                id,                       // ✅ Tampilkan ID di kolom pertama
                kode,
                nama,
                jumlah,
                df.format(harga),
                tanggal,
                df.format(total)
            };
            tabmode.addRow(data);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Data gagal ditampilkan: " + e.getMessage());
    }
}

    private void loadKodeBarang() {
        try {
        String sql = "SELECT kode_barang, Nama_Barang FROM barang ORDER BY kode_barang ASC";
        Statement stat = conn.createStatement();
        ResultSet rs = stat.executeQuery(sql);

        cbx_kdb.removeAllItems();
        barangMap.clear();

        while (rs.next()) {
            int kode = rs.getInt("kode_barang");
            String nama = rs.getString("Nama_Barang");
            String tampil = kode + " - " + nama;

            cbx_kdb.addItem(tampil);
            barangMap.put(tampil, kode);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Gagal memuat kode barang: " + e.getMessage());
    }
    }
    
    private void aturListenerComboBoxBarang() {
         cbx_kdb.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent ae) {
                try {
                String tampil = cbx_kdb.getSelectedItem().toString();
                int kode_barang = barangMap.get(tampil);

                String sql = "SELECT Nama_Barang, harga FROM barang WHERE kode_barang = ?";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setInt(1, kode_barang);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    txt_nb.setText(rs.getString("Nama_Barang"));
                    txt_harga.setText(String.valueOf(rs.getDouble("harga")));
                } else {
                    txt_nb.setText("");
                    txt_harga.setText("");
                }

                rs.close();
                ps.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Gagal ambil data barang: " + e.getMessage());
            }
        }
    });
}

    private void hitungTotal() {
        try {
        int jumlah = Integer.parseInt(txt_jumlah.getText());
        double harga = Util.parseHarga(txt_harga.getText());
        double total = jumlah * harga;
        txt_total.setText(Util.formatHarga(total));
    } catch (NumberFormatException e) {
        txt_total.setText("0.00");
    }
    }
}
